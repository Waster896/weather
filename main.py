import os
from fastapi import FastAPI, Request
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import asyncio
from dotenv import load_dotenv
import requests
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from io import BytesIO
from gtts import gTTS
import sqlite3
from datetime import datetime

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEATHER_API = os.getenv("WEATHER_API_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
app = FastAPI()

# --- FSM –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –æ –ø–æ–≥–æ–¥–µ ---
class WeatherStates(StatesGroup):
    waiting_for_city = State()

# --- –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ ---
@dp.message(Command("weather"))
async def weather_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state(WeatherStates.waiting_for_city)

@dp.message(WeatherStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip()
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API}&units=metric&lang=ru"
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        if data.get('cod') != 200:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
            await state.clear()
            return
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        humidity = data['main']['humidity']
        wind = data['wind']['speed']
        description = data['weather'][0]['description'].capitalize()
        response_text = (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üå¨ –í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
            f"‚òÅÔ∏è {description}"
        )
        await message.answer(response_text)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        try:
            db_cursor.execute(
                "INSERT INTO history (user_id, city, date) VALUES (?, ?, ?)",
                (message.from_user.id, city, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            )
            db_conn.commit()
        except Exception as e:
            pass
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã.")
    await state.clear()

class ForecastStates(StatesGroup):
    waiting_for_city = State()

@dp.message(Command("forecast"))
async def forecast_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:")
    await state.set_state(ForecastStates.waiting_for_city)

@dp.message(ForecastStates.waiting_for_city)
async def process_forecast_city(message: Message, state: FSMContext):
    city = message.text.strip()
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={WEATHER_API}&units=metric&lang=ru"
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        if data.get('cod') != "200":
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
            await state.clear()
            return
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π (–ø–æ 12:00)
        from datetime import datetime
        from pytz import timezone
        tz = timezone('Europe/Moscow')
        daily_forecasts = []
        for item in data['list']:
            if '12:00:00' in item['dt_txt']:
                date = datetime.strptime(item['dt_txt'], "%Y-%m-%d %H:%M:%S")
                daily_forecasts.append({
                    'date': date.astimezone(tz).strftime("%d.%m"),
                    'temp': item['main']['temp'],
                    'description': item['weather'][0]['description'].capitalize()
                })
        if not daily_forecasts:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π.")
            await state.clear()
            return
        forecast_text = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –≤ {city} –Ω–∞ 5 –¥–Ω–µ–π:\n\n" + "\n".join(
            f"üóì {day['date']}: {day['temp']}¬∞C, {day['description']}" 
            for day in daily_forecasts
        )
        await message.answer(forecast_text)
        # --- –ì—Ä–∞—Ñ–∏–∫ ---
        try:
            plt.figure(figsize=(10, 5))
            dates = [day['date'] for day in daily_forecasts]
            temps = [day['temp'] for day in daily_forecasts]
            plt.plot(dates, temps, marker='o', linestyle='-', color='b')
            plt.title('–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ 5 –¥–Ω–µ–π')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
            plt.grid(True)
            plt.xticks(rotation=45)
            plt.tight_layout()
            img_buffer = BytesIO()
            plt.savefig(img_buffer, format='png')
            img_buffer.seek(0)
            plt.close()
            await message.answer_photo(img_buffer)
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.")
        # --- –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
        try:
            tts = gTTS(text=forecast_text, lang='ru')
            voice_buffer = BytesIO()
            tts.write_to_fp(voice_buffer)
            voice_buffer.seek(0)
            await message.answer_voice(voice_buffer)
        except Exception as e:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
        try:
            db_cursor.execute(
                "INSERT INTO history (user_id, city, date) VALUES (?, ?, ?)",
                (message.from_user.id, city, datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
            )
            db_conn.commit()
        except Exception as e:
            pass
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
    await state.clear()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–ø–∏—à–∏ /weather —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ.")

@dp.message(lambda m: m.location is not None)
async def handle_location(message: Message):
    lat = message.location.latitude
    lon = message.location.longitude
    url = f"http://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={WEATHER_API}&units=metric&lang=ru"
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        if data.get('cod') != 200:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≤–∞—à–µ–π –ª–æ–∫–∞—Ü–∏–∏.")
            return
        city = data.get('name', '–≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏')
        temp = data['main']['temp']
        description = data['weather'][0]['description'].capitalize()
        await message.answer(
            f"üìç –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"üå° {temp}¬∞C, {description}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /weather –∏–ª–∏ /forecast –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
        )
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ –ª–æ–∫–∞—Ü–∏–∏.")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (user_id: {city, last_temp, threshold})
user_alerts = {}
scheduler = AsyncIOScheduler()

@dp.message(Command("alert"))
async def alert_command(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã:")
    await state.set_state(AlertStates.waiting_for_city)

class AlertStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_threshold = State()

@dp.message(AlertStates.waiting_for_city)
async def process_alert_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")
    await state.set_state(AlertStates.waiting_for_threshold)

@dp.message(AlertStates.waiting_for_threshold)
async def process_alert_threshold(message: Message, state: FSMContext):
    try:
        threshold = float(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = await state.get_data()
    city = data["city"]
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API}&units=metric&lang=ru"
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        if data.get('cod') != 200:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
            await state.clear()
            return
        last_temp = data['main']['temp']
        user_alerts[message.from_user.id] = {"city": city, "last_temp": last_temp, "threshold": threshold}
        await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –Ø —Å–æ–æ–±—â—É, –µ—Å–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city} –∏–∑–º–µ–Ω–∏—Ç—Å—è –±–æ–ª–µ–µ —á–µ–º –Ω–∞ {threshold}¬∞C.")
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    await state.clear()

async def check_weather_alerts():
    for user_id, info in user_alerts.items():
        city = info["city"]
        last_temp = info["last_temp"]
        threshold = info["threshold"]
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API}&units=metric&lang=ru"
        try:
            response = requests.get(url, timeout=10)
            data = response.json()
            if data.get('cod') != 200:
                continue
            current_temp = data['main']['temp']
            if abs(current_temp - last_temp) >= threshold:
                await bot.send_message(user_id, f"‚ö†Ô∏è –í {city} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞! –ë—ã–ª–æ: {last_temp}¬∞C, —Å–µ–π—á–∞—Å: {current_temp}¬∞C")
                user_alerts[user_id]["last_temp"] = current_temp
        except Exception:
            continue

@app.post("/webhook")
async def telegram_webhook(request: Request):
    update = types.Update.model_validate(await request.json())
    await dp.feed_update(bot, update)
    return {"status": "ok"}

async def on_startup():
    await bot.delete_webhook()
    await bot.set_webhook(f"{WEBHOOK_URL}/webhook")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    await on_startup()
    scheduler.add_job(check_weather_alerts, "interval", minutes=60)
    scheduler.start()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect('weather.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        city TEXT,
        date TEXT
    )
    ''')
    conn.commit()
    return conn, cursor

db_conn, db_cursor = init_db()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))